#- -*-Mode: Makefile;-*--------------------------------------------------
#
# File  : Makefile.vars 
#
# Author: Josef Urban
#
#  Makefile-definitions common to all MPTP-Makefile
# 
#
# Changes
#
# <1> Tue Feb 11 21:26:44 2003
#     New
#------------------------------------------------------------------------


# Options that should be set befor installation:

# Change to process nondefault MML.

MFILES		= $(MIZFILES)

# Top level MPTP directory, edit if $(MPTPDIR) not set

BASEDIR		= $(MPTPDIR)

# BASEDIR		= /g/miz_source/dbsupp1/dbtest/foo


# This is my preference, mml.lar is upon default Mizar installation
# put into some doc directory, you have to find it. You can
# also work only with some _initial_ segment of mml.lar.

MMLLAR 		= /usr/local/doc/mizar/mml.lar
# MMLLAR		= $(MFILES)/mml.lar
# MMLLAR		= /g/miz_source/dbsupp1/test/mml.lar100 #$(MFILES)/mml.lar




# OK, internal vars follow, do not touch them unless you know why


# Where additional binary files are
ADDBIN		= $(BASEDIR)/BIN

# database
DBDIR		= $(BASEDIR)/DB

# Where additional script files are
ADDSCRIPT	= $(BASEDIR)/SCRIPT

# Directory with hand-made requirement files
REQDIR		= $(DBDIR)/REQ

# Directory where .bys files are put
BYSDIR		= $(DBDIR)/BYS

# Directory for temporary DB files
TMPDBDIR	= $(DBDIR)/TMPDB

# You may have to edit these two lists, 
# according to your MML version

REQFILES	= boole subset arytm numerals real

# ReqFiles that are not in $(MMLLAR)
ADDEDREQFILES	= subset numerals real



# HIDDEN and TARSKI are not processed by normal Mizar and are not 
# included in mml.lar. We need to export them too. 
# Comment if you do not want to process them.
# Other files can be added to NONSTANDARDMIZ, if it causes errors, but
# you have to remove it from $(STANDARDMIZ).

HIDDEN		= hidden
TARSKI		= tarski

STANDARDMIZ	= $(shell cat $(MMLLAR))
NONSTANDARDMIZ	= $(HIDDEN) $(TARSKI)
ALLMIZ		= $(NONSTANDARDMIZ) $(STANDARDMIZ)
STDMIZPREF	= $(shell for i in $(STANDARDMIZ); do echo $${i:0:1}/$$i;done)
NONSTDMIZPREF	= $(shell for i in $(NONSTANDARDMIZ); do echo $${i:0:1}/$$i;done)
ALLMIZPREF	= $(NONSTDMIZPREF) $(STDMIZPREF)
REQPREF		= $(shell for i in $(REQFILES); do echo $${i:0:1}/$$i;done)
ADDEDREQPREF	= $(shell for i in $(ADDEDREQFILES); do echo $${i:0:1}/$$i;done)
ALLMIZREQPREF	= $(ADDEDREQPREF) $(ALLMIZPREF) 
FO_TOOL		=  $(ADDBIN)/fo_tool
REPORTER	=  $(ADDBIN)/reporter
ABS2PROL	=  $(ADDBIN)/abs2prol
#FO_TOOL		= /g/miz_source/dbsupp1/fo_tool  	# BIN/fo_tool
FOFLAGS		= -q
FOLOG		= /dev/null	# Output of $(FO_TOOL) is redirected here
AA_LOG		= /dev/null	# Output of $(REPORTER) is redirected here
PL_LOG		= /dev/null	# Output of $(ABS2PROL) is redirected here
ACCOM		= $(shell which accom)		# Using makeenv doesnot update .evl
ACCLOG		= /dev/null	# Output of $(ACCOM) is redirected here
VERIFIER	= verifier -q
VERIFLOG	= /dev/null	# Output of $(VERIFIER) is redirected here
RELCPREM	= $(ADDBIN)/relcprem
RLCLOG		= /dev/null	# Output of $(RELCPREM) is redirected here
TPTPEXP		= $(ADDBIN)/tptpexp
TPTPLOG		= /dev/null	# Output of $(TPTPEXP) is redirected here
DBENV		= $(ADDSCRIPT)/dbenv.pl # Environment massaging script
SHELL 		= /bin/bash
MAKE 		= make      	# Should also work with GNU make.
TAR 		= tar       
GZIP 		= gzip
LN 		= ln -s
MIZ		= "miz"	# suffix of .miz files


LOGS		= $(ACCLOG) $(VERIFLOG) $(FOLOG) $(RLCLOG)

LETTERS		= a b c d e f g h i j k l m n o p q r s t u v w x y z

STDBS	= theorems.db definitions.db \
	constrtypes.db exmodes.db properties.db \
	exclusters.db funcclusters.db condclusters.db  \
	funcarities.db predarities.db requirements.db

ALLDBS	= $(STDBS) references.db counts.db runningcounts.db environments.db


